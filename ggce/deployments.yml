# API
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: api
  namespace: ggce
spec:
  minReplicas: 3
  maxReplicas: 10
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api
  targetCPUUtilizationPercentage: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: ggce
spec:
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api
        image: pdmm/ggce:37
        ports:
        - containerPort: 8888
        resources:
          requests:
            memory: 300Mi
            cpu: 300m
          limits:
            memory: 1024Mi
            cpu: 1000m
        envFrom:
        - configMapRef:
            name: shared-config

# DB
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db
  namespace: ggce
spec:
  selector:
    matchLabels:
      app: db
  serviceName: db
  replicas: 1
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: db
        image: postgres
        ports:
          - containerPort: 5432
        resources:
          requests:
            memory: 256Mi
            cpu: 250m
          limits:
            memory: 1024Mi
            cpu: 1000m
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        env:
          - name: POSTGRES_USER
            valueFrom:
              configMapKeyRef:
                name: shared-config
                key: DB_USER
          - name: POSTGRES_PASSWORD
            valueFrom:
              configMapKeyRef:
                name: shared-config
                key: DB_PASS
          - name: POSTGRES_DB
            valueFrom:
              configMapKeyRef:
                name: shared-config
                key: DB_NAME
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 200M

# RABBITMQ
---
apiVersion: apps/v1
# See the Prerequisites section of https://www.rabbitmq.com/cluster-formation.html#peer-discovery-k8s.
kind: StatefulSet
metadata:
  name: rmq
  namespace: ggce
spec:
  serviceName: rmq
  # Three nodes is the recommended minimum. Some features may require a majority of nodes
  # to be available.
  replicas: 1
  selector:
    matchLabels:
      app: rmq
  template:
    metadata:
      labels:
        app: rmq
    spec:
      containers:
      - name: rmq
        image: rabbitmq:3.9
        volumeMounts:
          - name: config-volume
            mountPath: /etc/rabbitmq
          - name: rmq-data
            mountPath: /var/lib/rabbitmq
        # Learn more about what ports various protocols use
        # at https://www.rabbitmq.com/networking.html#ports
        ports:
          - name: http
            protocol: TCP
            containerPort: 15672
          - name: amqp
            protocol: TCP
            containerPort: 5672
        resources:
          requests:
            memory: 256Mi
            cpu: 250m
          limits:
            memory: 1024Mi
            cpu: 1000m
        livenessProbe:
          exec:
            # This is just an example. There is no "one true health check" but rather
            # several rabbitmq-diagnostics commands that can be combined to form increasingly comprehensive
            # and intrusive health checks.
            # Learn more at https://www.rabbitmq.com/monitoring.html#health-checks.
            #
            # Stage 2 check:
            command: ["rabbitmq-diagnostics", "status"]
          initialDelaySeconds: 60
          # See https://www.rabbitmq.com/monitoring.html for monitoring frequency recommendations.
          periodSeconds: 60
          timeoutSeconds: 15
        readinessProbe:
          exec:
            # This is just an example. There is no "one true health check" but rather
            # several rabbitmq-diagnostics commands that can be combined to form increasingly comprehensive
            # and intrusive health checks.
            # Learn more at https://www.rabbitmq.com/monitoring.html#health-checks.
            #
            # Stage 1 check:
            command: ["rabbitmq-diagnostics", "ping"]
          initialDelaySeconds: 20
          periodSeconds: 60
          timeoutSeconds: 10
        imagePullPolicy: Always
        env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: RABBITMQ_USE_LONGNAME
            value: "true"
          # See a note on cluster_formation.k8s.address_type in the config file section
          - name: K8S_SERVICE_NAME
            value: rmq
          - name: RABBITMQ_NODENAME
            value: rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
          - name: K8S_HOSTNAME_SUFFIX
            value: .$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
          - name: RABBITMQ_ERLANG_COOKIE
            value: "mycookie"
      volumes:
        - name: config-volume
          configMap:
            name: rabbitmq-config
            items:
            - key: rabbitmq.conf
              path: rabbitmq.conf
            - key: enabled_plugins
              path: enabled_plugins
  volumeClaimTemplates:
  - metadata:
      name: rmq-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 200M

# CONSUMER
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: gac
  namespace: ggce
spec:
  minReplicas: 3
  maxReplicas: 10
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gac
  targetCPUUtilizationPercentage: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gac
  namespace: ggce
spec:
  selector:
    matchLabels:
      app: gac
  template:
    metadata:
      labels:
        app: gac
    spec:
      containers:
      - name: gac
        image: pdmm/gac:8
        resources:
          requests:
            memory: 100Mi
            cpu: 100m
          limits:
            memory: 1000Mi
            cpu: 1000m
        envFrom:
        - configMapRef:
            name: shared-config
        env:
          - name: TAG
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
